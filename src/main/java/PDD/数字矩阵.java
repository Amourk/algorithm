package PDD;

public class 数字矩阵 {
  /**
   * 描述
   *
   * 如图数字矩阵：
   *
   * 1     1     1     1     1     1     1     1     1
   *
   * 1     2     3     4     5     6     7     8     9
   *
   * 1     3     6    10    15    21    28    36    45
   *
   * 1     4    10    20    35    56    84   120   165
   *
   * 1     5    15    35    70   126   210   330   495
   *
   * 1     6    21    56   126   252   462   792  1287
   *
   * 1     7    28    84   210   462   924  1716  3003
   *
   * 1     8    36   120   330   792  1716  3432  6435
   *
   * 1     9    45   165   495  1287  3003  6435 12870
   *
   * 每个数字等于前一个数和上面一个数字两个数字之和。即第n行的第i个数等于第n行的第i-1个数和n-1行第i个数之和。
   *
   * 获取n行第i个数的值。
   *
   *
   * 输入
   * int
   *
   *
   * 输出
   * int
   *
   *
   * 输入样例 1
   *
   * 1,1
   * 输出样例 1
   *
   * 1
   * 输入样例 2
   *
   * 2,2
   * 输出样例 2
   *
   * 2
   * 输入样例 3
   *
   * 3,3
   * 输出样例 3
   *
   * 6
   * 输入样例 4
   *
   * 9,9
   * 输出样例 4
   *
   * 12870
   */

  public static void main(String[] args) {
    int tt = tt(8,   7);
    System.out.println(tt);
  }

  public static int tt(int n,int i){
    int[][] dp = new int[n][i];
    for (int j = 0; j < n; j++) {
      dp[j][0] = 1;
    }
    for (int j = 0; j < i; j++) {
      dp[0][j] = 1;
    }
    for (int j = 1; j < n  ; j++) {
      for (int k = 1; k < i; k++) {
        dp[j][k] = dp[j][k-1] + dp[j-1][k];
      }
    }
    return dp[n-1][i-1];
  }
}
